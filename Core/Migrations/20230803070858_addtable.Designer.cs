// <auto-generated />
using Core.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(WatchMovieHD))]
    [Migration("20230803070858_addtable")]
    partial class addtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.models.Achivement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("achives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Awarded for outstanding achievements in the film industry.",
                            FilmId = 0,
                            Name = "Academy"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Recognizes excellence in film and television.",
                            FilmId = 0,
                            Name = "GoldenGlobe"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Recognizes excellence in film and television.",
                            FilmId = 0,
                            Name = "Oscar"
                        });
                });

            modelBuilder.Entity("Core.models.Achivements", b =>
                {
                    b.Property<int>("AchivementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AchivementsId"));

                    b.Property<int>("AchivementId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("AchivementsId");

                    b.HasIndex("AchivementId");

                    b.ToTable("achivments");
                });

            modelBuilder.Entity("Core.models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "usa",
                            Duration = "142 min",
                            Genre = "drama",
                            Name = "the shawshank redemption",
                            Producer = "frank darabont",
                            Type = "movie",
                            Year = "1994"
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            Duration = "175 min ",
                            Genre = "Crime",
                            Name = "The Godfather",
                            Producer = "Francis Ford Coppola",
                            Type = "movie",
                            Year = "1972"
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            Duration = "148 min",
                            Genre = "Fantastic",
                            Name = "Inception",
                            Producer = "Christopher Nolan",
                            Type = "movie",
                            Year = "2010"
                        });
                });

            modelBuilder.Entity("Core.models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            FirstName = "John",
                            LastName = "Doe",
                            UserName = "user123",
                            email = "user123@email.com",
                            password = "secure_password123"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Jane",
                            LastName = "Smith",
                            UserName = "movie_lover",
                            email = "movie_lover@email.com",
                            password = "strong_pass_456"
                        });
                });

            modelBuilder.Entity("Core.models.Viewedfilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UsersId");

                    b.ToTable("Viewedfilms");
                });

            modelBuilder.Entity("Core.models.likedFilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("userid");

                    b.ToTable("LikedFilms");
                });

            modelBuilder.Entity("Core.models.Achivements", b =>
                {
                    b.HasOne("Core.models.Achivement", "Achivement")
                        .WithMany()
                        .HasForeignKey("AchivementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achivement");
                });

            modelBuilder.Entity("Core.models.Viewedfilms", b =>
                {
                    b.HasOne("Core.models.Film", "Film")
                        .WithMany("viewedFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Users", "Users")
                        .WithMany("viewedFilms")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.models.likedFilms", b =>
                {
                    b.HasOne("Core.models.Film", "Film")
                        .WithMany("likedFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Users", "Users")
                        .WithMany("likedFilms")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.models.Film", b =>
                {
                    b.Navigation("likedFilms");

                    b.Navigation("viewedFilms");
                });

            modelBuilder.Entity("Core.models.Users", b =>
                {
                    b.Navigation("likedFilms");

                    b.Navigation("viewedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
