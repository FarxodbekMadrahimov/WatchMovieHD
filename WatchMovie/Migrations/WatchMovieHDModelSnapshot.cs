// <auto-generated />
using System;
using Core.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WatchMovie.Migrations
{
    [DbContext(typeof(WatchMovieHD))]
    partial class WatchMovieHDModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.models.Achivement", b =>
                {
                    b.Property<int>("AchivementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AchivementId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AchivementId");

                    b.ToTable("achives");
                });

            modelBuilder.Entity("Core.models.Achivements", b =>
                {
                    b.Property<int>("AchivementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AchivementsId"));

                    b.Property<int>("AchivementId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("AchivementsId");

                    b.HasIndex("AchivementId");

                    b.ToTable("Achivements");
                });

            modelBuilder.Entity("Core.models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.models.Viewedfilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<int>("usersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("usersId");

                    b.ToTable("Viewedfilms");
                });

            modelBuilder.Entity("Core.models.duration", b =>
                {
                    b.Property<int>("durationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("durationId"));

                    b.Property<int?>("episode")
                        .HasColumnType("integer");

                    b.Property<int?>("minut_per_episede")
                        .HasColumnType("integer");

                    b.Property<int?>("minute")
                        .HasColumnType("integer");

                    b.Property<int?>("season")
                        .HasColumnType("integer");

                    b.HasKey("durationId");

                    b.ToTable("durations");
                });

            modelBuilder.Entity("Core.models.film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilmId"));

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("durationId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("FilmId");

                    b.HasIndex("durationId");

                    b.ToTable("films");
                });

            modelBuilder.Entity("Core.models.likedFilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<int>("usersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("usersId");

                    b.ToTable("LikedFilms");
                });

            modelBuilder.Entity("Core.models.Achivements", b =>
                {
                    b.HasOne("Core.models.Achivement", "Achivement")
                        .WithMany()
                        .HasForeignKey("AchivementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achivement");
                });

            modelBuilder.Entity("Core.models.Viewedfilms", b =>
                {
                    b.HasOne("Core.models.film", "film")
                        .WithMany("viewedFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Users", "users")
                        .WithMany("viewedFilms")
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("film");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Core.models.film", b =>
                {
                    b.HasOne("Core.models.duration", "duration")
                        .WithMany()
                        .HasForeignKey("durationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("duration");
                });

            modelBuilder.Entity("Core.models.likedFilms", b =>
                {
                    b.HasOne("Core.models.film", "film")
                        .WithMany("likedFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.Users", "users")
                        .WithMany("likedFilms")
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("film");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Core.models.Users", b =>
                {
                    b.Navigation("likedFilms");

                    b.Navigation("viewedFilms");
                });

            modelBuilder.Entity("Core.models.film", b =>
                {
                    b.Navigation("likedFilms");

                    b.Navigation("viewedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
